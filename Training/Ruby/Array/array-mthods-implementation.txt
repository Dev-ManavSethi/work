a=[[1,2],[3,4],[5,6]]

#transpose
a.transpose
=> [[1, 3, 5], [2, 4, 6]]

#fill
a.fill {|i| i*i}
=> [0, 1, 4, 9, 16, 25, 36]

a.fill 2, 0..4
=> [2, 2, 2, 2, 2]


#assoc

b=[1,3,4,5]
=> [1, 3, 4, 5]
irb(main):039:0> c=["Hello", "World"]
=> ["Hello", "World"]
irb(main):040:0> d = [a,b,c]
=> [[0, 1, 4, 9, 16, 25, 36], [1, 3, 4, 5], ["Hello", "World"]]
irb(main):041:0> d.assoc "World"
=> nil
irb(main):042:0> d.assoc "Hello"
=> ["Hello", "World"]
irb(main):043:0> d.assoc 1
=> [1, 3, 4, 5]
irb(main):044:0> d.assoc 0
=> [0, 1, 4, 9, 16, 25, 36]
irb(main):045:0> a[0] = 1
=> 1
irb(main):046:0> d.assoc 1
=> [1, 1, 4, 9, 16, 25, 36]


#rassoc
d.rassoc 1
=> [1, 1, 4, 9, 16, 25, 36]
irb(main):056:0> d.rassoc 0
=> nil
irb(main):057:0> b
=> [1, 3, 4, 5]
irb(main):058:0> d.rassoc 3
=> [1, 3, 4, 5]


#uniq
a.uniq
=> [1, 4, 9, 16, 25, 36]
irb(main):060:0> b.uniq
=> [1, 3, 4, 5]
irb(main):061:0> c.uniq
=> ["Hello", "World"]
irb(main):062:0> a.uniq!
=> [1, 4, 9, 16, 25, 36]
irb(main):063:0> a
=> [1, 4, 9, 16, 25, 36]
irb(main):064:0> b
=> [1, 3, 4, 5]

#compact
a.push nil
=> [1, 4, 9, 16, 25, 36, nil]
irb(main):066:0> a.compact
=> [1, 4, 9, 16, 25, 36]
irb(main):067:0> a
=> [1, 4, 9, 16, 25, 36, nil]
irb(main):068:0> a.compact!
=> [1, 4, 9, 16, 25, 36]
irb(main):069:0> a
=> [1, 4, 9, 16, 25, 36]

#to_s
a.to_s
=> "[1, 4, 9, 16, 25, 36]"

#to_h
e = [[0, 3],[1,2]]
=> [[0, 3], [1, 2]]
irb(main):078:0> e.to_h
=> {0=>3, 1=>2}

#flatten
e.flatten
=> [0, 3, 1, 2]
irb(main):085:0> e.flatten!
=> [0, 3, 1, 2]

#shuffle
a.shuffle
=> [1, 4, 9, 25, 36, 16]
irb(main):087:0> a.shuffle
=> [36, 4, 25, 16, 9, 1]
irb(main):088:0> a.shuffle
=> [16, 36, 9, 1, 25, 4]
irb(main):089:0> a.shuffle!
=> [9, 36, 4, 25, 16, 1]

#include
a.include?4
=> true
irb(main):092:0> a.include?40
=> false

#permutation
a.permutation(3).to_a
=> [[9, 36, 4], [9, 36, 25], [9, 36, 16], [9, 36, 1], [9, 4, 36], [9, 4, 25], [9, 4, 16], [9, 4, 1], [9, 25, 36], [9, 25, 4], [9, 25, 16], [9, 25, 1], [9, 16, 36], [9, 16, 4], [9, 16, 25], [9, 16, 1], [9, 1, 36], [9, 1, 4], [9, 1, 25], [9, 1, 16], [36, 9, 4], [36, 9, 25], [36, 9, 16], [36, 9, 1], [36, 4, 9], [36, 4, 25], [36, 4, 16], [36, 4, 1], [36, 25, 9], [36, 25, 4], [36, 25, 16], [36, 25, 1], [36, 16, 9], [36, 16, 4], [36, 16, 25], [36, 16, 1], [36, 1, 9], [36, 1, 4], [36, 1, 25], [36, 1, 16], [4, 9, 36], [4, 9, 25], [4, 9, 16], [4, 9, 1], [4, 36, 9], [4, 36, 25], [4, 36, 16], [4, 36, 1], [4, 25, 9], [4, 25, 36], [4, 25, 16], [4, 25, 1], [4, 16, 9], [4, 16, 36], [4, 16, 25], [4, 16, 1], [4, 1, 9], [4, 1, 36], [4, 1, 25], [4, 1, 16], [25, 9, 36], [25, 9, 4], [25, 9, 16], [25, 9, 1], [25, 36, 9], [25, 36, 4], [25, 36, 16], [25, 36, 1], [25, 4, 9], [25, 4, 36], [25, 4, 16], [25, 4, 1], [25, 16, 9], [25, 16, 36], [25, 16, 4], [25, 16, 1], [25, 1, 9], [25, 1, 36], [25, 1, 4], [25, 1, 16], [16, 9, 36], [16, 9, 4], [16, 9, 25], [16, 9, 1], [16, 36, 9], [16, 36, 4], [16, 36, 25], [16, 36, 1], [16, 4, 9], [16, 4, 36], [16, 4, 25], [16, 4, 1], [16, 25, 9], [16, 25, 36], [16, 25, 4], [16, 25, 1], [16, 1, 9], [16, 1, 36], [16, 1, 4], [16, 1, 25], [1, 9, 36], [1, 9, 4], [1, 9, 25], [1, 9, 16], [1, 36, 9], [1, 36, 4], [1, 36, 25], [1, 36, 16], [1, 4, 9], [1, 4, 36], [1, 4, 25], [1, 4, 16], [1, 25, 9], [1, 25, 36], [1, 25, 4], [1, 25, 16], [1, 16, 9], [1, 16, 36], [1, 16, 4], [1, 16, 25]]
irb(main):098:0> a
=> [9, 36, 4, 25, 16, 1]
irb(main):099:0> a.permutation(7).to_a
=> []
a.permutation(0).to_a
=> [[]]
irb(main):101:0> a.permutation(-1).to_a
=> []


#combination
a.combination(3).to_a
=> [[9, 36, 4], [9, 36, 25], [9, 36, 16], [9, 36, 1], [9, 4, 25], [9, 4, 16], [9, 4, 1], [9, 25, 16], [9, 25, 1], [9, 16, 1], [36, 4, 25], [36, 4, 16], [36, 4, 1], [36, 25, 16], [36, 25, 1], [36, 16, 1], [4, 25, 16], [4, 25, 1], [4, 16, 1], [25, 16, 1]]
irb(main):103:0> a.combination(0).to_a
=> [[]]
irb(main):104:0> a.combination(8).to_a
=> []

#sample

a.sample
=> 25
irb(main):106:0> a.sample
=> 25
irb(main):107:0> a.sample
=> 16
irb(main):108:0> a.sample 4
=> [36, 9, 1, 25]

#repeated_combination
a.repeated_combination(3).to_a
=> [[9, 9, 9], [9, 9, 36], [9, 9, 4], [9, 9, 25], [9, 9, 16], [9, 9, 1], [9, 36, 36], [9, 36, 4], [9, 36, 25], [9, 36, 16], [9, 36, 1], [9, 4, 4], [9, 4, 25], [9, 4, 16], [9, 4, 1], [9, 25, 25], [9, 25, 16], [9, 25, 1], [9, 16, 16], [9, 16, 1], [9, 1, 1], [36, 36, 36], [36, 36, 4], [36, 36, 25], [36, 36, 16], [36, 36, 1], [36, 4, 4], [36, 4, 25], [36, 4, 16], [36, 4, 1], [36, 25, 25], [36, 25, 16], [36, 25, 1], [36, 16, 16], [36, 16, 1], [36, 1, 1], [4, 4, 4], [4, 4, 25], [4, 4, 16], [4, 4, 1], [4, 25, 25], [4, 25, 16], [4, 25, 1], [4, 16, 16], [4, 16, 1], [4, 1, 1], [25, 25, 25], [25, 25, 16], [25, 25, 1], [25, 16, 16], [25, 16, 1], [25, 1, 1], [16, 16, 16], [16, 16, 1], [16, 1, 1], [1, 1, 1]]
irb(main):111:0> a.repeated_combination(0).to_a
=> [[]]

#product


#bsearch
a.bsearch {|n| n=1}
=> nil
irb(main):120:0> a.bsearch {|n| n=2}
=> nil
irb(main):121:0> a.bsearch {|n| n=4}
=> nil
irb(main):122:0> a.bsearch {|n| n>=4}
=> 9
irb(main):123:0> a.bsearch {|n| n==4}
=> nil
irb(main):124:0> a.bsearch {|n| n<=4}
=> 1

#bsearch_index
a.bsearch_index {|n| n<=30}
=> 0
irb(main):129:0> a.bsearch_index {|n| n>=30}
=> 5
irb(main):130:0> a.bsearch_index {|n| n>=40}
=> nil

#repeated_permutation
a.repeated_permutation(2).to_a
=> [[1, 1], [1, 4], [1, 9], [1, 16], [1, 25], [1, 36], [4, 1], [4, 4], [4, 9], [4, 16], [4, 25], [4, 36], [9, 1], [9, 4], [9, 9], [9, 16], [9, 25], [9, 36], [16, 1], [16, 4], [16, 9], [16, 16], [16, 25], [16, 36], [25, 1], [25, 4], [25, 9], [25, 16], [25, 25], [25, 36], [36, 1], [36, 4], [36, 9], [36, 16], [36, 25], [36, 36]]


#map

a.map {|x|x<5}
=> [true, true, true]



#map!

a.map! {|x|x<5}
=> [true, true, true]
irb(main):174:0> a
=> [true, true, true]



#& , | , +, -
a=[1,2,3]
=> [1, 2, 3]
irb(main):147:0> b=[4,5,6]
=> [4, 5, 6]
irb(main):148:0> a&b
=> []
irb(main):149:0> a|b
=> [1, 2, 3, 4, 5, 6]

a+b
=> [1, 2, 3, 4, 5, 6]
irb(main):152:0> a-b
=> [1, 2, 3]
irb(main):153:0> b-a
=> [4, 5, 6]

#count, l ,s
a.count
=> 3

a.size
=> 3
irb(main):158:0> a.length
=> 3

#find_index
a.find_index 4
=> nil
irb(main):160:0> a.find_index 3
=> 2

#select

a.select {|num| num>2}
=> [3]
irb(main):162:0> a.select {|num| num>1}
=> [2, 3]
irb(main):163:0> a.select {|num| num>0}
=> [1, 2, 3]
irb(main):164:0> a.select {|num| num<0}
=> []


a.reject {|num| num<0}
=> [1, 2, 3]


a.collect {|a| a<6}
=> [true, true, true]
irb(main):169:0> a.collect {|a| a<2}
=> [true, false, false]
irb(main):170:0> a.collect {|a| a>4}
=> [false, false, false]

#pack




#first, last

a.first
=> 1
irb(main):186:0> a.last
=> 3
irb(main):187:0> a.first 2
=> [1, 2]
irb(main):188:0> a.first 3
=> [1, 2, 3]



#any
a.any? 2
=> true
irb(main):192:0> a.any? 4
=> false
irb(main):193:0> a.any? ""
=> false
irb(main):194:0> a.any? "4"
=> false


#reverse_each {|num| block} #returns array

a.reverse_each {|x| puts x}
3
2
1
=> [1, 2, 3]

#zip

a=[1,2,3]
=> [1, 2, 3]
irb(main):201:0> b=[4,5,6]
=> [4, 5, 6]
irb(main):202:0> c=[7,8,9]
=> [7, 8, 9]
irb(main):203:0> a.zip b,c
=> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]

#take a.take 3
=> [1, 2, 3]
irb(main):210:0> a.take 2
=> [1, 2]
irb(main):211:0> a.take 1
=> [1]

#take_while
a.take_while {|a| a < 2}
=> [1]
irb(main):216:0> a.take_while {|a| a < 4}
=> [1, 2, 3]
irb(main):217:0> a.take_while {|a| a < 0}
=> []

#drop
a.drop 2
=> [3]
irb(main):221:0> a
=> [1, 2, 3]
irb(main):222:0> a.drop 4
=> []
irb(main):223:0> a.drop 1
=> [2, 3]
irb(main):224:0> a.drop 4
=> []
irb(main):225:0> a.drop 0
=> [1, 2, 3]

#drop_while

a.drop_while {|a| a<10}
=> []
irb(main):228:0> a.drop_while {|a| a<0}
=> [1, 2, 3]

#cycle

a.cycle(2).to_a
=> [1, 2, 3, 1, 2, 3]
irb(main):231:0> a.cycle(1).to_a
=> [1, 2, 3]
irb(main):232:0> a.cycle(10).to_a
=> [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]

#insert ind, num

a.insert 3,4
=> [1, 2, 3, 4]
irb(main):237:0> a.insert 0,0
=> [0, 1, 2, 3, 4]
irb(main):238:0> a.insert 1,0
=> [0, 0, 1, 2, 3, 4]

#indx
a.index 4
=> 5
irb(main):240:0> a.index 0
=> 0

#rindex (rightmost index)

a.rindex 4
=> 5
irb(main):246:0> a.rindex 2
=> 3

#replace arr2 (destructive)
a.replace [4]
=> [4]
irb(main):252:0> a
=> [4]
irb(main):253:0> a
=> [4]
irb(main):254:0> a.replace [1,4,7]
=> [1, 4, 7]
irb(main):255:0> a
=> [1, 4, 7]

a.clear

#<=>, <<, ==

a<<b
=> [1, 2, 3, [4, 5, 6, 7]]
irb(main):262:0> a
=> [1, 2, 3, [4, 5, 6, 7]]
irb(main):263:0> b<<a
=> [4, 5, 6, 7, [1, 2, 3, [...]]]


#reverse
a.reverse
=> [[4, 5, 6, 7, [1, 2, 3, [...]]], 3, 2, 1]
irb(main):270:0> a
=> [1, 2, 3, [4, 5, 6, 7, [...]]]
irb(main):271:0> a.reverse!
=> [[4, 5, 6, 7, [...]], 3, 2, 1]
irb(main):272:0> a
=> [[4, 5, 6, 7, [...]], 3, 2, 1]

a.empty?
=> false
irb(main):274:0> a.eql?b
=> false
irb(main):275:0> a.concat c
=> [[4, 5, 6, 7, [...]], 3, 2, 1, 7, 8, 9]
irb(main):276:0> a.inspect
=> "[[4, 5, 6, 7, [...]], 3, 2, 1, 7, 8, 9]"
irb(main):277:0> a
=> [[4, 5, 6, 7, [...]], 3, 2, 1, 7, 8, 9]
irb(main):278:0> a.delete 1
=> 1

#each

a.each {|x| puts x.to_s}
[4, 5, 6, 7, [[...], 3, 2, 7, 8, 9]]
3
2
7
8
9
=> [[4, 5, 6, 7, [...]], 3, 2, 7, 8, 9]

#slice, #slice!




#dig
a.dig 1
=> 2
irb(main):308:0> a.dig 2
=> 3
irb(main):309:0> a.dig 3
=> nil
irb(main):310:0> a.dig 0
=> 1

#hash
a.hash
=> 74892294803161624

#at
.at 2
=> 3
irb(main):324:0> a.at 0
=> 1
irb(main):325:0> a.at -2
=> 2

#fetch
a.at 2
=> 3
irb(main):324:0> a.at 0
=> 1
irb(main):325:0> a.at -2
=> 2
irb(main):326:0> a.fetch 2
=> 3
irb(main):327:0> a.fetch 0
=> 1
irb(main):328:0> a.fetch -1
=> 3
irb(main):329:0> a.fetch -1,-2
=> 3
irb(main):330:0> a.fetch 0,4
=> 1
irb(main):331:0> a.fetch 0,1
=> 1

#pop push 
a.pop
=> 3
irb(main):335:0> a
=> [1, 2]
irb(main):336:0> a.push 3

=> [1, 2, 3]

#shift unshift

a.shift
=> 1
irb(main):339:0> a
=> [2, 3]
irb(main):340:0> a.shift
=> 2
irb(main):341:0> a.unshift 2
=> [2, 3]
irb(main):342:0> a.unshift 1
=> [1, 2, 3]
irb(main):343:0> a.unshift 1,6
=> [1, 6, 1, 2, 3]

#freeze
a.freeze
=> [6, 1, 2, 3]
irb(main):348:0> a
=> [6, 1, 2, 3]
irb(main):349:0> a.pop
Traceback (most recent call last):
        3: from /usr/bin/irb:11:in `<main>'
        2: from (irb):349
        1: from (irb):349:in `pop'
FrozenError (can't modify frozen Array)
irb(main):350:0> a.frozen?
=> true

#each_index
a.each_index {|x| print x}
0123=> [6, 1, 2, 3]

#join
a.join ","
=> "1,2,3"
irb(main):365:0> a.join " "
=> "1 2 3"

#rotate
a.rotate 22
=> [2, 3, 1]
irb(main):376:0> a.rotate! 22
=> [2, 3, 1]
irb(main):377:0> a
=> [2, 3, 1]>0
