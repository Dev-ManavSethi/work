SELECT */cnames... FROM tname
SELECT DISTINCT cname, DISTINCT ... FROM
SELECT COUNT(cname), ...
SELECT cname+cname2*1.1 FROM ..
WHERE
AND OR NOT
BETWEEN a AND b
IN (....);
ORDER BY cname ASC ....
SELECT MIN/MAX(cname), ... FROM tname ... //int + text
SELECT AVG/SUM(cname), ... FROM tname ...//numbers
SELECT ... FROM WHERE cname LIKE ...
%: >= 0 chars
_: one char
AS (alias) in SELECT, ORDER BY, GROUP BY only, not in FROM, WHERE
LIMIT
NULL: unknown/zero/empty
IS : =

JOIN: when datas are in diff tables
INNER JOIN (intersection)
SELECT cname, ... FROM t1 (INNER) JOIN t2 ON t1.a1 = t2.a2
JOIN t3 ON ...

LEFT JOIN:
SELECT cname, ... FROM t1
LEFT JOIN t2 ON t1.c1=t2.c2;

RIGHT JOIN:
SELECT cname, ... FROM t1
RIGHT JOIN t2 ON t1.c1 = t2.c2;

FULL JOIN:
SELECT cname, ... FROM t1
FULL JOIN t2 ON t1.c1 = t2.c2;

SELF JOIN: (heirarchical data, similarities or disimilarities bw columns)
joining table back to itself

USING (for shortcuts)
ON customers.cid = customers.id === USING(cid);

NATURAL (for even lesst typing)
SELECT * FROM t1 NATURAL JOIN t2
NATURAL JOIN t3...(t1 must have link with t2, t2 must have link with t3) (full join)
(matches all fields with same name)

GROUP BY
SELECT cname,... FROM table WHERE ... GROUP BY cnames... ORDER BY cnames...

SELECT country, COUNT(*)
FROM customers
GROUP BY country
ORDER BY COUNT(*) DESC;

HAVING vs WHERE
WHERE: filters records before grouping
HAVING: filters records after grouping

#SYNTAX
SELECT ... FROM... WHERE... GROUP BY... HAVING ... ORDER BY ...

#group set: customername
SELECT customername, SUM(order_details.quantity*order_details.price) AS AmountSpent
FROM customers
WHERE order_details.date < '1999-01-01'
JOIN USING (customer_id)
GROUP BY customername
HAVING SUM(order_details.quantity*order_details.price) > 5000
ORDER BY AmountSpent DESC;


GROUP SETS

GROUP BY GROUPING SETS ((cname1), (cname2), (cname3,cname4))
#to group more than 1 sets

ROLLUP (cname1, cname2, cname3..) === GROUP BY GROUPING SETS(...)

